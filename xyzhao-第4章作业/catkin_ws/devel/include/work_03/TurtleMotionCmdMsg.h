// Generated by gencpp from file work_03/TurtleMotionCmdMsg.msg
// DO NOT EDIT!


#ifndef WORK_03_MESSAGE_TURTLEMOTIONCMDMSG_H
#define WORK_03_MESSAGE_TURTLEMOTIONCMDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace work_03
{
template <class ContainerAllocator>
struct TurtleMotionCmdMsg_
{
  typedef TurtleMotionCmdMsg_<ContainerAllocator> Type;

  TurtleMotionCmdMsg_()
    : name()
    , start_move(false)
    , linear_velocity_x(0.0)
    , angular_velocity_z(0.0)  {
    }
  TurtleMotionCmdMsg_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , start_move(false)
    , linear_velocity_x(0.0)
    , angular_velocity_z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _start_move_type;
  _start_move_type start_move;

   typedef float _linear_velocity_x_type;
  _linear_velocity_x_type linear_velocity_x;

   typedef float _angular_velocity_z_type;
  _angular_velocity_z_type angular_velocity_z;





  typedef boost::shared_ptr< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TurtleMotionCmdMsg_

typedef ::work_03::TurtleMotionCmdMsg_<std::allocator<void> > TurtleMotionCmdMsg;

typedef boost::shared_ptr< ::work_03::TurtleMotionCmdMsg > TurtleMotionCmdMsgPtr;
typedef boost::shared_ptr< ::work_03::TurtleMotionCmdMsg const> TurtleMotionCmdMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator1> & lhs, const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.start_move == rhs.start_move &&
    lhs.linear_velocity_x == rhs.linear_velocity_x &&
    lhs.angular_velocity_z == rhs.angular_velocity_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator1> & lhs, const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace work_03

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c5c8ff6294017c048dbb00bbe500e82";
  }

  static const char* value(const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c5c8ff6294017c0ULL;
  static const uint64_t static_value2 = 0x48dbb00bbe500e82ULL;
};

template<class ContainerAllocator>
struct DataType< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "work_03/TurtleMotionCmdMsg";
  }

  static const char* value(const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"bool start_move\n"
"float32 linear_velocity_x\n"
"float32 angular_velocity_z\n"
;
  }

  static const char* value(const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.start_move);
      stream.next(m.linear_velocity_x);
      stream.next(m.angular_velocity_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurtleMotionCmdMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::work_03::TurtleMotionCmdMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::work_03::TurtleMotionCmdMsg_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "start_move: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_move);
    s << indent << "linear_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.linear_velocity_x);
    s << indent << "angular_velocity_z: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORK_03_MESSAGE_TURTLEMOTIONCMDMSG_H
