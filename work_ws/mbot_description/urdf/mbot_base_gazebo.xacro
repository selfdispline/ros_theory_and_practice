<?xml version="1.0"?>
<robot name="mbot" xmlns:xacro="http://www.ros.org/wiki/xacro">

 	<!-- PROPERTY LIST -->
	<xacro:property name="M_PI" value="3.1415926"/>
	<xacro:property name="base_mass"   value="0.002" /> 
	<xacro:property name="base_length" value="0.35"/>
    <xacro:property name="base_width" value="0.25"/>    	
    <xacro:property name="base_hight" value="0.1"/>




	<xacro:property name="box_mass"   value="0.02" /> 
	<xacro:property name="box_length" value="0.04"/>
    <xacro:property name="box_width" value="0.04"/>    	
    <xacro:property name="box_hight" value="0.03"/>

    <xacro:property name="caster_mass"    value="0.01" /> 
    <xacro:property name="caster_radius"  value="0.025"/> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) -->
    <xacro:property name="caster_joint_x" value="0.18"/>


    <xacro:property name="wheel_mass"   value="0.01" />
    <xacro:property name="wheel_radius" value="0.05"/>
    <xacro:property name="wheel_length" value="0.025"/>

	<!-- Defining the colors used in this robot -->
    	<material name="yellow">
        	<color rgba="1 0.4 0 1"/>
    	</material>
    	<material name="black">
        	<color rgba="0 0 0 0.95"/>
    	</material>
	<material name="white">
                <color rgba="1 1 1 1"/>
        </material>

	<!-- Macro for inertia matrix -->
	<xacro:macro name="cylinder_inertial_matrix" params="m r h">
        	<inertial>
            		<mass value="${m}" />
            		<inertia ixx="${m*(3*r*r+h*h)/12}" ixy="0" ixz="0" 
				 iyx="0" iyy="${m*(3*r*r+h*h)/12}" iyz="0"
                		 izx="0" izy="0" izz="${m*r*r/2}" /> 
        	</inertial>
    	</xacro:macro>


    <!-- Macro for inertia matrix -->
    <xacro:macro name="sphere_inertial_matrix" params="m r">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${2*m*r*r/5}" ixy="0" ixz="0"
                iyy="${2*m*r*r/5}" iyz="0" 
                izz="${2*m*r*r/5}" />
        </inertial>
    </xacro:macro>

	<!-- Macro for inertia matrix -->
	<xacro:macro name="box_inertial_matrix" params="m l w h">
        	<inertial>
            		<mass value="${m}" />
            		<inertia ixx="${m*(w*w+h*h)/12}" ixy="0" ixz="0" 
				 iyx="0" iyy="${m*(l*l+h*h)/12}" iyz="0"
                		 izx="0" izy="0" izz="${m*(l*l+w*w)/12}" /> 
        	</inertial>
    	</xacro:macro>
	
	<!-- Macro for robot wheel -->
	<xacro:macro name="wheel" params="prefix base reflectx reflecty">
	
	<joint name="${prefix}_wheel_joint" type="continuous">
		<origin xyz="${reflectx*(base_length/2-1.5*wheel_radius)} ${reflecty*(base_width/2)} ${-base_hight/2}" rpy="0 0 0"/>
        	<parent link="${base}"/>
        	<child link="${prefix}_wheel_link"/>
        	<axis xyz="0 1 0"/>
    	</joint>

	<link name="${prefix}_wheel_link">
        	<visual>
            		<origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
            		<geometry>
                		<cylinder radius="${wheel_radius}" length = "${wheel_length}"/>
            		</geometry>
            		<material name="white" />
        	</visual>
		<collision>
                	<origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
                	<geometry>
                	    <cylinder radius="${wheel_radius}" length = "${wheel_length}"/>
                	</geometry>
            	</collision>
		<cylinder_inertial_matrix  m="${wheel_mass}" r="${wheel_radius}" h="${wheel_length}" />
    	</link>
	
	<gazebo reference="${prefix}_wheel_link">
		<material>Gazebo/Gray</material>
        </gazebo>

	<!-- Transmission is important to link the joints and the controller -->
        <transmission name="${prefix}_wheel_joint_trans">
		<type>transmission_interface/SimpleTransmission</type>
	        <joint name="${prefix}_wheel_joint" >
			<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
		</joint>
            	<actuator name="${prefix}_wheel_joint_motor">
                	<hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                	<mechanicalReduction>1</mechanicalReduction>
            	</actuator>
        </transmission>

	</xacro:macro>



    <!-- Macro for robot caster -->
    <xacro:macro name="caster" params="prefix reflect">
        <joint name="${prefix}_caster_joint" type="continuous">
            <origin xyz="${reflect*(base_length/2-wheel_radius)} 0 ${-base_hight/2 - caster_radius}" rpy="0 0 0"/>
            <parent link="base_link"/>
            <child link="${prefix}_caster_link"/>
            <axis xyz="0 1 0"/>
        </joint>

        <link name="${prefix}_caster_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}" />
                </geometry>
                <material name="white" />
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}" />
                </geometry>
            </collision>      
            <sphere_inertial_matrix  m="${caster_mass}" r="${caster_radius}" />
        </link>

        <gazebo reference="${prefix}_caster_link">
            <material>Gazebo/White</material>
        </gazebo>
    </xacro:macro>








	<xacro:macro name="mbot_base_gazebo">
		<link name="base_footprint">
	            <visual>
	                <origin xyz="0 0 0" rpy="0 0 0" />
	                <geometry>
	                    <box size="0.001 0.001 0.001" />
	                </geometry>
	            </visual>
	        </link>
	
        	<gazebo reference="base_footprint">
            		<turnGravityOff>false</turnGravityOff>
        	</gazebo>

        	<joint name="base_footprint_joint" type="fixed">
            		<origin xyz="0 0 ${base_hight/2 + wheel_radius}" rpy="0 0 0" />        
            		<parent link="base_footprint"/>
            		<child link="base_link" />
        	</joint>

		<link name="base_link">
			<visual>
 				<origin xyz=" 0 0 0" rpy="0 0 0" />
            			<geometry>
                			<box size="${base_length} ${base_width} ${base_hight}" />
            			</geometry>
            			<material name="yellow"/>	
			</visual>
			<collision>
                		<origin xyz=" 0 0 0" rpy="0 0 0" />
                		<geometry>
                    			<box size="${base_length} ${base_width} ${base_hight}" />
               			</geometry>
            		</collision> 
			<box_inertial_matrix  m="${base_mass}" l="${base_length}" w="${base_width}" h="${base_hight}" /> 
		</link>


				<joint name="box_link" type="fixed">
          		<origin xyz="-0.14 0 ${base_hight/2 + box_hight/2}" rpy="0 0 0" />        
            		<parent link="base_link"/>
            		<child link="box_link" />
        	</joint>


		<link name="box_link">
			<visual>
 				<origin xyz=" 0 0 0" rpy="0 0 0" />
            			<geometry>
                			<box size="${box_length} ${box_width} ${box_hight}" />
            			</geometry>
            			<material name="white"/>	
			</visual>
			<collision>
                		<origin xyz=" 0 0 0" rpy="0 0 0" />
                		<geometry>
                    			<box size="${box_length} ${box_width} ${box_hight}" />
               			</geometry>
            		</collision> 
			<box_inertial_matrix  m="${box_mass}" l="${box_length}" w="${box_width}" h="${box_hight}" /> 
		</link>
		
		<gazebo reference="box_link">
			<material>Gazebo/White</material>
        	</gazebo>







		
		<gazebo reference="base_link">
			<material>Gazebo/Blue</material>
        	</gazebo>


		<wheel prefix="back_left" base="base_link" reflectx="-1" reflecty="1"/>
        	<wheel prefix="back_right" base="base_link" reflectx="-1" reflecty="-1"/>

		<caster prefix="front" reflect="1"/>
        <!-- controller -->
        <gazebo>
            <plugin name="differential_drive_controller" 
                    filename="libgazebo_ros_diff_drive.so">
                <rosDebugLevel>Debug</rosDebugLevel>
                <publishWheelTF>true</publishWheelTF>
                <robotNamespace>/</robotNamespace>
                <publishTf>1</publishTf>
                <publishWheelJointState>true</publishWheelJointState>
                <alwaysOn>true</alwaysOn>
                <updateRate>100.0</updateRate>
                <legacyMode>true</legacyMode>
                <leftJoint>back_left_wheel_joint</leftJoint>
                <rightJoint>back_right_wheel_joint</rightJoint>
                <wheelSeparation>${wheel_radius*2}</wheelSeparation>
                <wheelDiameter>${2*wheel_radius}</wheelDiameter>
                <broadcastTF>1</broadcastTF>
                <wheelTorque>30</wheelTorque>
                <wheelAcceleration>1.8</wheelAcceleration>
                <commandTopic>cmd_vel</commandTopic>
                <odometryFrame>odom</odometryFrame> 
                <odometryTopic>odom</odometryTopic> 
                <robotBaseFrame>base_footprint</robotBaseFrame>
            </plugin>
        </gazebo> 

	</xacro:macro>
</robot>
